#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1

WORK_DIR="/tmp/uu"
BACKUP_DIR="/usr/sbin/uu"
PROG="$WORK_DIR/uuplugin"
CONFIG_FILE="$WORK_DIR/uu.conf"
XTABLES_FILE="$WORK_DIR/xtables-nft-multi"
TAR_FILE="/tmp/uu.tar.gz"
UNINSTALL_FLAG="$WORK_DIR/uu.uninstall"
UPDATE_FLAG="$WORK_DIR/uu.update"

extra_command 'install' 'Install/Update UUBooster plugin'
extra_command 'uninstall' 'Uninstall UUBooster plugin'
extra_command 'reinstall' 'Reinstall UUBooster plugin'
extra_command 'version' 'Show UUBooster plugin version'
extra_command 'update_script' 'Update the service script itself'

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo_color() {
    if [ -t 1 ] && [ "$TERM" != "dumb" ]; then
        printf "$1$2$NC\n"
    else
        echo "$2"
    fi
}

start_service() {
    if ! running; then
        if [ -f "$UNINSTALL_FLAG" ]; then
            echo_color "$YELLOW" "uu.uninstall flag found, need to reinstall"
            reinstall
        elif [ -f "$UPDATE_FLAG" ]; then
            echo_color "$YELLOW" "uu.update flag found, forcing download"
            rm -f "$BACKUP_DIR/uu.tar.gz"
            install
            rm -f "$UPDATE_FLAG"
        elif [ ! -f "$PROG" ] || [ ! -f "$CONFIG_FILE" ] || [ ! -f "$XTABLES_FILE" ]; then
            echo_color "$YELLOW" "Missing required files, need to download"
            install
        fi
        echo_color "$BLUE" "Starting UUBooster service..."
    fi
    
    # 使用procd启动服务
    procd_open_instance
    procd_set_param command "$PROG" "$CONFIG_FILE"
    procd_set_param respawn
    procd_set_param limits stack="8388608 8388608"
    
    procd_open_data
	# configure firewall
	json_add_array firewall
		# Allow uugamebooster Input
		json_add_object ''
		json_add_string type rule
		json_add_string name "Allow-uugamebooster-Input"
		json_add_string src '*'
		json_add_string target 'ACCEPT'
		json_add_string direction 'in'
		json_add_string device 'tun163'
		json_add_string proto 'all'
		json_close_object
		# Allow uugamebooster Forward-1 (inbound)
		json_add_object ''
		json_add_string type rule
		json_add_string name "Allow-uugamebooster-Forward-1"
		json_add_string src '*'
		json_add_string dest '*'
		json_add_string target 'ACCEPT'
		json_add_string direction 'in'
		json_add_string device 'tun163'
		json_add_string proto 'all'
		json_close_object
		# Allow uugamebooster Forward-2 (outbound)
		json_add_object ''
		json_add_string type rule
		json_add_string name "Allow-uugamebooster-Forward-2"
		json_add_string src '*'
		json_add_string dest '*'
		json_add_string target 'ACCEPT'
		json_add_string direction 'out'
		json_add_string device 'tun163'
		json_add_string proto 'all'
		json_close_object
	json_close_array
	procd_close_data

    procd_close_instance
    
    echo_color "$GREEN" "UUBooster service started"
}

stop_service() {
    if running; then
        echo_color "$BLUE" "Stopping UUBooster service..."
    fi
}

service_stopped() {
    # 等待服务完全停止，最多等待10秒
    local timeout=10
    local count=0
    
    while [ $count -lt $timeout ]; do
        if ! running; then
            echo_color "$GREEN" "UUBooster service stopped"
            return 0
        fi
        sleep 1
        count=$((count + 1))
    done
    
    # 如果超时仍未停止，输出警告
    echo_color "$YELLOW" "Service may still be running after $timeout seconds"
}

reload_service() {
    restart
}

restart() {
    if running; then stop; fi
    start
}

install() {
    if running; then stop; fi

    # 检查是否已有下载信息
    if [ -z "$download_url" ] || [ -z "$expected_md5" ]; then
        echo_color "$BLUE" "Installing UUBooster plugin..."

        # 获取系统架构
        local arch=$(uname -m)
        
        echo_color "$BLUE" "Getting download information..."
        
        # 获取下载信息
        local api_response=$(curl --max-time 10 -s "https://router.uu.163.com/api/plugin?type=openwrt-$arch")
        
        if [ -z "$api_response" ]; then
            echo_color "$RED" "Failed to get API response"
            return 1
        fi
        
        # 解析JSON获取URL和MD5
        local download_url=$(echo "$api_response" | jq -r '.url')
        local expected_md5=$(echo "$api_response" | jq -r '.md5')
    fi
    
    if [ -z "$download_url" ] || [ -z "$expected_md5" ]; then
        echo_color "$RED" "API returned invalid data"
        echo "Response: $api_response"
        return 1
    fi

    local use_backup=0

    if [ -f "$BACKUP_DIR/uu.tar.gz" ]; then
        use_backup=1
        cp -f "$BACKUP_DIR/uu.tar.gz" "$TAR_FILE"
    else
        echo_color "$BLUE" "Downloading uu.tar.gz..."
        wget "$download_url" -O "$TAR_FILE"
        
        if [ $? -ne 0 ] || [ ! -f "$TAR_FILE" ]; then
            echo_color "$RED" "Failed to download uu.tar.gz"
            return 1
        fi
        # 验证MD5
        echo_color "$BLUE" "Verifying MD5 checksum..."
    fi

    local actual_md5=$(md5sum "$TAR_FILE" | cut -d' ' -f1)
    
    if [ "$actual_md5" != "$expected_md5" ]; then
        if [ "$use_backup" = 1 ]; then
            rm -f "$TAR_FILE" "$BACKUP_DIR/uu.tar.gz"
            install
            return $?
        else
            echo_color "$RED" "MD5 mismatch! Expected: $expected_md5, Got: $actual_md5"
            rm -f "$TAR_FILE"
            return 1
        fi
    else
        if [ "$use_backup" != 1 ]; then
            echo_color "$GREEN" "MD5 verification passed"
        fi
    fi

    # 创建必要的目录
    mkdir -p "$WORK_DIR" "$BACKUP_DIR"
    
    # 解压文件到目标目录（覆盖已有文件）
    echo_color "$BLUE" "Extracting uu.tar.gz to $WORK_DIR ..."
    tar -xzf "$TAR_FILE" -C "$WORK_DIR"
    
    if [ $? -ne 0 ]; then
        echo_color "$RED" "Failed to extract uu.tar.gz"
        return 1
    fi

    if [ "$use_backup" != 1 ]; then
        local file_size=$(du -k "$TAR_FILE" | cut -f1)
        local available_space=$(df -k "$BACKUP_DIR" | awk 'NR==2 {print $4}')
        if [ "$available_space" -ge "$file_size" ]; then
            cp -f "$TAR_FILE" "$BACKUP_DIR/uu.tar.gz"
        fi
    fi

    rm -f "$TAR_FILE"
    
    # 设置可执行权限
    chmod +x "$PROG" "$XTABLES_FILE"
    
    echo_color "$GREEN" "UUBooster plugin installed successfully"
    version
}

reinstall() {
    echo_color "$BLUE" "Reinstalling UUBooster plugin..."
    uninstall
    install
    echo_color "$GREEN" "UUBooster plugin reinstalled successfully"
}

uninstall() {
    echo_color "$BLUE" "Uninstalling UUBooster plugin..."
    if running; then stop; fi
    rm -rf "$WORK_DIR" "$BACKUP_DIR"
    echo_color "$GREEN" "UUBooster plugin uninstalled successfully"
}

version() {
    if [ -f "$PROG" ]; then
        echo_color "$BLUE" "=========================================="
        echo_color "$BLUE" "          UUBooster Version Info"
        echo_color "$BLUE" "=========================================="
        "$PROG" --version
        echo_color "$BLUE" "=========================================="
    else
        echo_color "$YELLOW" "UUBooster plugin not installed"
    fi
}

update_script() {
    echo_color "$BLUE" "Updating UUBooster service script..."
    if running; then stop; fi
    
    # 下载新的服务脚本
    echo_color "$BLUE" "Downloading latest service script..."
    wget -O /etc/init.d/uu https://raw.githubusercontent.com/PKC278/openwrt-uuplugin/main/uu
    
    if [ $? -ne 0 ]; then
        echo_color "$RED" "Failed to download service script"
        return 1
    fi
    
    # 设置可执行权限
    chmod +x /etc/init.d/uu
    
    echo_color "$GREEN" "Service script updated successfully"
    echo_color "$BLUE" "You can now restart the service with: service uu start"
}